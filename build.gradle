buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${version_major}.${version_minor}.${version_patch}"
group = "snownee"
archivesBaseName = "Kiwi-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(16)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv().BUILD_NUMBER != null) {
    // Maven version scheme uses dot to separate things
    version += ".${System.getenv().BUILD_NUMBER}"
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.

    mappings channel: 'official', version: '1.17.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                kiwi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                kiwi {
                    source sourceSets.main
                }
            }
        }
    }
}

def a = [
    "/assets/kiwi/blockstates",
    "/assets/kiwi/models",
    "/snownee/kiwi/test",
    "/data",
    "/third_party"
]
def b = [
    "Specification-Title": 'kiwi',
    "Specification-Vendor": 'Snownee',
    "Specification-Version": '1',
    "Implementation-Title": 'kiwi',
    "Implementation-Version": "${project.version}",
    "Implementation-Vendor" :'Snownee',
    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

task sourcesJar(type: Jar) {
    //exclude(a)
    manifest { attributes(b) }
    from(sourceSets.main.allJava)
    archiveName = "${archivesBaseName}-${version}-sources.${extension}"
}

task deobfJar(type: Jar) {
    //exclude(a)
    manifest { attributes(b) }
    from(sourceSets.main.output)
    archiveName = "${archivesBaseName}-${version}-deobf.${extension}"
}

jar {
    exclude(a)
    manifest { attributes(b) }
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

repositories {
    maven {
        name = "jei"
        url = "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-1.17.1:8.0.0.14:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.17.1:8.0.0.14")
}

processResources {
    from ('src/main/java') {
        include '**/*.json'
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
