buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        //classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "net.darkhax.curseforgegradle" version "1.0.11"
}

apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

configurations {
    shadowCommon
    implementation.extendsFrom shadowCommon
}

version = project.mod_version
group = "snownee.kiwi"
archivesBaseName = "Kiwi-${minecraft_version}-forge"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv().BUILD_NUMBER != null) {
    // Maven version scheme uses dot to separate things
    version += ".${System.getenv().BUILD_NUMBER}"
}

mixin {
    add sourceSets.main, "kiwi.refmap.json"
    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "kiwi.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.

    mappings channel: 'official', version: project.minecraft_version
    //mappings channel: 'parchment', version: '2021.09.05-1.17.1'

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                kiwi {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                kiwi {
                    source sourceSets.main
                }
            }
        }
        
        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', ''

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'kiwi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                kiwi {
                    source sourceSets.main
                }
            }
        }
    }
}

def a = [
    "/assets/kiwi/blockstates",
    "/assets/kiwi/models",
    "/snownee/kiwi/test",
    "/data",
    "/.cache",
    "/third_party"
]
def b = [
    "Specification-Title": project.name,
    "Specification-Vendor": 'Snownee',
    "Specification-Version": '1',
    "Implementation-Title": project.name,
    "Implementation-Version": "${project.version}",
    "Implementation-Vendor" :'Snownee',
    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

sourceSets {
    main.resources.srcDirs += "$rootDir/src/generated/resources"
    main.java.srcDirs += "$rootDir/annotation/src/main/java"
    main.resources.srcDirs += "$rootDir/annotation-processor/src/main/resources"
    main.java.srcDirs += "$rootDir/annotation-processor/src/main/java"
}

sourceSets {
    processor {
        compileClasspath += sourceSets.main.runtimeClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
        java {
            srcDirs = [ "$rootDir/annotation-processor/src/main/java" ]
        }
        resources {
            srcDirs = [ "$rootDir/annotation-processor/src/main/resources" ]
        }
    }
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(a)
    manifest { attributes(b) }
    relocate "com.moandjiezana.toml", "${project.group}.shadowed.com.moandjiezana.toml"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set('')
    finalizedBy 'reobfShadowJar'
}

task APJar(type: Jar) {
    //include "/snownee/kiwi/build"
    //exclude(a)
    from(sourceSets.processor.output)
    archiveName = "${archivesBaseName}-${version}-processor.${extension}"
}

task sourcesJar(type: Jar) {
    //exclude(a)
    manifest { attributes(b) }
    from(sourceSets.main.allJava)
    archiveName = "${archivesBaseName}-${version}-sources.${extension}"
}

task deobfJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    //exclude(a)
    manifest { attributes(b) }
    archiveName = "${archivesBaseName}-${version}-deobf.${extension}"
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude(a)
    manifest { attributes(b) }
}

artifacts {
    shadowJar
}

reobf {
    shadowJar {}
}

repositories {
    maven {
        name = "jei"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
}

configurations {
    library // Create a new special configuration for your Java libraries
    implementation.extendsFrom library
}

minecraft.runs.all {
  // Tell forge to include your libraries in the classpath
  lazyToken('minecraft_classpath') {
    configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
  }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    
	implementation project(':annotation')
    annotationProcessor project(':annotation-processor')

    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:${project.cloth_config_version}")
    library shadowCommon("com.moandjiezana.toml:toml4j:${project.toml4j_version}") {
        exclude(module: "gson")
    }
}

processResources {
    from ('src/main/java') {
        include '**/*.json'
    }
}

jar {
    finalizedBy('reobfJar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact shadowJar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
